import multiprocessing as mp

def leibniz_term(start, num_terms):
    pi_part = 0
    for i in range(start, start + num_terms):
        pi_part += ((-1) ** i) / (2 * i + 1)
    return pi_part

def calculate_pi(num_terms, num_processes):

    terms_per_process = num_terms // num_processes
    pool = mp.Pool(processes=num_processes)

   
    results = [pool.apply_async(leibniz_term, args=(i * terms_per_process, terms_per_process)) for i in range(num_processes)]


    pi_estimate = sum([result.get() for result in results])

    pi_estimate *= 4

    pool.close()
    pool.join()

    return pi_estimate

if __name__ == "__main__":
    num_terms = 1000000
    num_processes = 3 
    pi = calculate_pi(num_terms, num_processes)
    print(f"Estimaci√≥n de pi: {pi}")